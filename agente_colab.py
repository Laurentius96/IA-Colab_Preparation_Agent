import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog, simpledialog
import os
import re
import json
import threading
import time
import webbrowser
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from googleapiclient.http import MediaFileUpload

# Configura√ß√£o para evitar erro do msedge
os.environ['BROWSER'] = 'default'

# Escopos de permiss√£o: Acesso total ao Google Drive
SCOPES = ['https://www.googleapis.com/auth/drive']
CLIENT_SECRETS_FILE = 'client_secrets.json'

class AgenteColabGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ Agente de Prepara√ß√£o do Colab v3.1 - CORRIGIDO")
        self.root.geometry("800x700")
        self.root.configure(bg='#f0f0f0')
        
        # Vari√°veis
        self.service = None
        self.notebook_id = None
        
        self.setup_ui()
        
    def setup_ui(self):
        """Configura a interface do usu√°rio"""
        
        # T√≠tulo principal
        title_frame = tk.Frame(self.root, bg='#2196F3', height=80)
        title_frame.pack(fill='x', padx=10, pady=10)
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(title_frame, 
                              text="üöÄ Agente de Prepara√ß√£o do Colab v3.1", 
                              font=('Arial', 18, 'bold'),
                              bg='#2196F3', fg='white')
        title_label.pack(expand=True)
        
        subtitle_label = tk.Label(title_frame,
                                 text="‚úÖ VERS√ÉO CORRIGIDA - Sem erro do msedge",
                                 font=('Arial', 10),
                                 bg='#2196F3', fg='white')
        subtitle_label.pack()
        
        # Frame principal
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # PASSO 1: Autentica√ß√£o
        auth_frame = tk.LabelFrame(main_frame, text="üìã PASSO 1: Autentica√ß√£o", 
                                  font=('Arial', 12, 'bold'), bg='#f0f0f0')
        auth_frame.pack(fill='x', pady=5)
        
        self.auth_button = tk.Button(auth_frame, text="üîê Autenticar com Google Drive",
                                    command=self.authenticate, bg='#4CAF50', fg='white',
                                    font=('Arial', 10, 'bold'), height=2)
        self.auth_button.pack(pady=10)
        
        self.auth_status = tk.Label(auth_frame, text="‚ùå N√£o autenticado", 
                                   font=('Arial', 10), bg='#f0f0f0')
        self.auth_status.pack()
        
        # PASSO 2: Link do Notebook
        link_frame = tk.LabelFrame(main_frame, text="üìé PASSO 2: Link do Notebook", 
                                  font=('Arial', 12, 'bold'), bg='#f0f0f0')
        link_frame.pack(fill='x', pady=5)
        
        tk.Label(link_frame, text="Cole o link do seu Google Colab:", 
                font=('Arial', 10), bg='#f0f0f0').pack(anchor='w', padx=10, pady=5)
        
        self.link_entry = tk.Entry(link_frame, font=('Arial', 10), width=70)
        self.link_entry.pack(padx=10, pady=5)
        
        self.validate_button = tk.Button(link_frame, text="‚úÖ Validar Link",
                                        command=self.validate_link, bg='#FF9800', fg='white',
                                        font=('Arial', 10, 'bold'))
        self.validate_button.pack(pady=5)
        
        self.link_status = tk.Label(link_frame, text="", font=('Arial', 10), bg='#f0f0f0')
        self.link_status.pack()
        
        # PASSO 3: Conte√∫do da Aula
        content_frame = tk.LabelFrame(main_frame, text="üìö PASSO 3: Aula do Professor Synapse", 
                                     font=('Arial', 12, 'bold'), bg='#f0f0f0')
        content_frame.pack(fill='both', expand=True, pady=5)
        
        tk.Label(content_frame, text="Cole TODA a aula do Professor Synapse abaixo:", 
                font=('Arial', 10), bg='#f0f0f0').pack(anchor='w', padx=10, pady=5)
        
        self.content_text = scrolledtext.ScrolledText(content_frame, height=15, 
                                                     font=('Consolas', 9))
        self.content_text.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Bot√µes de a√ß√£o
        action_frame = tk.Frame(main_frame, bg='#f0f0f0')
        action_frame.pack(fill='x', pady=10)
        
        self.process_button = tk.Button(action_frame, text="‚ö° PROCESSAR AULA",
                                       command=self.process_content, bg='#F44336', fg='white',
                                       font=('Arial', 12, 'bold'), height=2, width=20)
        self.process_button.pack(side='left', padx=5)
        
        self.clear_button = tk.Button(action_frame, text="üßπ Limpar Tudo",
                                     command=self.clear_all, bg='#9E9E9E', fg='white',
                                     font=('Arial', 10))
        self.clear_button.pack(side='right', padx=5)
        
        # Barra de progresso
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.pack(fill='x', pady=5)
        
        # Log de status
        self.log_text = scrolledtext.ScrolledText(main_frame, height=6, 
                                                 font=('Consolas', 8), bg='#263238', fg='#4CAF50')
        self.log_text.pack(fill='x', pady=5)
        
        self.log("üöÄ Agente de Prepara√ß√£o do Colab v3.1 iniciado!")
        self.log("‚úÖ VERS√ÉO CORRIGIDA - Sem erro do msedge")
        self.log("üìã Siga os passos na ordem para processar sua aula.")
        
    def log(self, message):
        """Adiciona mensagem ao log"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update()
        
    def authenticate(self):
        """Autentica√ß√£o com m√∫ltiplas tentativas e fallback"""
        self.log("üîê Iniciando autentica√ß√£o...")
        self.progress.start()
        
        def auth_thread():
            try:
                if not os.path.exists(CLIENT_SECRETS_FILE):
                    self.log(f"‚ùå Arquivo '{CLIENT_SECRETS_FILE}' n√£o encontrado!")
                    messagebox.showerror("Erro", f"Arquivo '{CLIENT_SECRETS_FILE}' n√£o encontrado!\nBaixe as credenciais do Google Cloud Console.")
                    return
                
                creds = None
                if os.path.exists('token.json'):
                    self.log("‚úÖ Carregando credenciais salvas...")
                    creds = Credentials.from_authorized_user_file('token.json', SCOPES)
                
                if not creds or not creds.valid:
                    if creds and creds.expired and creds.refresh_token:
                        self.log("üîÑ Atualizando credenciais...")
                        creds.refresh(Request())
                    else:
                        self.log("üåê Tentando autentica√ß√£o autom√°tica...")
                        flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRETS_FILE, SCOPES)
                        
                        try:
                            # M√âTODO 1: Tentativa autom√°tica com navegador padr√£o
                            creds = flow.run_local_server(port=0, open_browser=True)
                            self.log("‚úÖ Autentica√ß√£o autom√°tica bem-sucedida!")
                            
                        except Exception as auto_error:
                            self.log(f"‚ö†Ô∏è Autentica√ß√£o autom√°tica falhou: {auto_error}")
                            self.log("üîÑ Tentando autentica√ß√£o manual...")
                            
                            # M√âTODO 2: Autentica√ß√£o manual
                            try:
                                flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRETS_FILE, SCOPES)
                                auth_url, _ = flow.authorization_url(prompt='consent')
                                
                                # Copia URL para clipboard
                                self.root.clipboard_clear()
                                self.root.clipboard_append(auth_url)
                                
                                self.log("üìã URL copiada para clipboard!")
                                
                                # Mostra a URL para o usu√°rio
                                result = messagebox.askokcancel(
                                    "Autentica√ß√£o Manual", 
                                    f"A URL de autentica√ß√£o foi copiada para seu clipboard.\n\n"
                                    f"PASSOS:\n"
                                    f"1. Cole a URL no seu navegador (Ctrl+V)\n"
                                    f"2. Fa√ßa login no Google\n"
                                    f"3. Copie o c√≥digo de autoriza√ß√£o\n"
                                    f"4. Clique OK para continuar\n\n"
                                    f"URL: {auth_url[:50]}..."
                                )
                                
                                if result:
                                    # Pede o c√≥digo de autoriza√ß√£o
                                    auth_code = simpledialog.askstring(
                                        "C√≥digo de Autoriza√ß√£o", 
                                        "Cole o c√≥digo de autoriza√ß√£o aqui:",
                                        show='*'
                                    )
                                    
                                    if auth_code:
                                        flow.fetch_token(code=auth_code.strip())
                                        creds = flow.credentials
                                        self.log("‚úÖ Autentica√ß√£o manual bem-sucedida!")
                                    else:
                                        raise Exception("C√≥digo de autoriza√ß√£o n√£o fornecido")
                                else:
                                    raise Exception("Autentica√ß√£o cancelada pelo usu√°rio")
                                    
                            except Exception as manual_error:
                                self.log(f"‚ùå Autentica√ß√£o manual falhou: {manual_error}")
                                raise manual_error
                    
                    # Salva as credenciais
                    with open('token.json', 'w') as token:
                        token.write(creds.to_json())
                        
                self.service = build('drive', 'v3', credentials=creds)
                self.log("‚úÖ Autentica√ß√£o completa!")
                self.auth_status.config(text="‚úÖ Autenticado com sucesso!", fg='green')
                self.auth_button.config(text="‚úÖ Autenticado", state='disabled')
                
            except Exception as e:
                self.log(f"‚ùå Erro na autentica√ß√£o: {e}")
                messagebox.showerror("Erro de Autentica√ß√£o", 
                                    f"Erro na autentica√ß√£o:\n{str(e)}\n\n"
                                    f"Dicas:\n"
                                    f"1. Verifique se o arquivo client_secrets.json est√° correto\n"
                                    f"2. Tente executar como administrador\n"
                                    f"3. Verifique sua conex√£o com a internet")
            finally:
                self.progress.stop()
                
        threading.Thread(target=auth_thread, daemon=True).start()
        
    def validate_link(self):
        """Valida o link do notebook"""
        link = self.link_entry.get().strip()
        if not link:
            messagebox.showwarning("Aviso", "Por favor, cole o link do notebook!")
            return
            
        self.log("üîç Validando link do notebook...")
        
        # Extrai o ID do notebook
        notebook_id = None
        
        if '/d/' in link:
            try:
                notebook_id = link.split('/d/')[1].split('/')[0]
            except IndexError:
                pass
        elif '/drive/' in link:
            try:
                notebook_id = link.split('/drive/')[1].split('/')[0].split('#')[0].split('?')[0]
            except IndexError:
                pass
        
        if not notebook_id:
            id_pattern = r'[a-zA-Z0-9_-]{25,}'
            matches = re.findall(id_pattern, link)
            if matches:
                for match in matches:
                    if len(match) >= 25:
                        notebook_id = match
                        break
        
        if notebook_id:
            self.notebook_id = notebook_id
            self.log(f"‚úÖ ID do notebook extra√≠do: {notebook_id}")
            self.link_status.config(text=f"‚úÖ Notebook ID: {notebook_id[:20]}...", fg='green')
        else:
            self.log("‚ùå N√£o foi poss√≠vel extrair o ID do notebook!")
            self.link_status.config(text="‚ùå Link inv√°lido!", fg='red')
            messagebox.showerror("Erro", "Link inv√°lido! Certifique-se de colar o link completo do Google Colab.")
            
    def parse_synapse_output(self, text):
        """Parser inteligente para a aula do Professor Synapse"""
        self.log("üìù Analisando estrutura da aula...")
        
        # Remove "Mergulhos Adicionais"
        if "üåä Mergulhos Adicionais Opcionais" in text:
            text = text.split("üåä Mergulhos Adicionais Opcionais")[0]
            self.log("‚úÖ Se√ß√£o 'Mergulhos Adicionais' removida")
        
        # Regex para encontrar blocos
        pattern = re.compile(
            r"(```markdown\n(.*?)\n```)|(‚ñ∂Ô∏è.*?```python\n(.*?)\n```)|(üìñ.*?```markdown\n(.*?)\n```)", 
            re.DOTALL
        )
        
        matches = list(pattern.finditer(text))
        self.log(f"üéØ Encontrados {len(matches)} blocos v√°lidos")
        
        cells = []
        code_blocks = 0
        
        for match in matches:
            if match.group(2):
                # Markdown
                content = match.group(2).replace('<br>', '').strip()
                cells.append({'type': 'markdown', 'content': content})
            elif match.group(4):
                # C√≥digo
                content = match.group(4).strip()
                cells.append({'type': 'code', 'content': content})
                cells.append({'type': 'code', 'content': '# Pratique seu c√≥digo aqui!'})
                code_blocks += 1
            elif match.group(6):
                # Texto de leitura
                content = match.group(6).strip()
                cells.append({'type': 'markdown', 'content': content})
        
        self.log(f"‚úÖ Processamento conclu√≠do: {len(cells)} c√©lulas, {code_blocks} c√≥digos")
        return cells
        
    def create_notebook_structure(self, cells_data):
        """Cria estrutura do notebook"""
        notebook_cells = []
        for cell_item in cells_data:
            if cell_item['type'] == 'code':
                notebook_cells.append({
                    "cell_type": "code",
                    "execution_count": None,
                    "metadata": {},
                    "outputs": [],
                    "source": [line + '\n' for line in cell_item['content'].split('\n')]
                })
            elif cell_item['type'] == 'markdown':
                notebook_cells.append({
                    "cell_type": "markdown",
                    "metadata": {},
                    "source": [line + '\n' for line in cell_item['content'].split('\n')]
                })
                
        notebook_json = {
            "nbformat": 4,
            "nbformat_minor": 0,
            "metadata": {
                "colab": {"provenance": []},
                "kernelspec": {"name": "python3", "display_name": "Python 3"},
                "language_info": {"name": "python"}
            },
            "cells": notebook_cells
        }
        
        return json.dumps(notebook_json, indent=2)
        
    def process_content(self):
        """Processa o conte√∫do e atualiza o notebook"""
        # Verifica√ß√µes
        if not self.service:
            messagebox.showerror("Erro", "Fa√ßa a autentica√ß√£o primeiro!")
            return
            
        if not self.notebook_id:
            messagebox.showerror("Erro", "Valide o link do notebook primeiro!")
            return
            
        content = self.content_text.get(1.0, tk.END).strip()
        if not content:
            messagebox.showerror("Erro", "Cole o conte√∫do da aula!")
            return
            
        # Confirma√ß√£o
        if not messagebox.askyesno("Confirma√ß√£o", 
                                  f"Isso ir√° SUBSTITUIR o conte√∫do do notebook!\n\nNotebook ID: {self.notebook_id}\n\nContinuar?"):
            return
            
        self.log("‚ö° Iniciando processamento...")
        self.progress.start()
        
        def process_thread():
            try:
                # Parse do conte√∫do
                parsed_cells = self.parse_synapse_output(content)
                if not parsed_cells:
                    self.log("‚ùå Nenhum bloco v√°lido encontrado!")
                    messagebox.showerror("Erro", "N√£o foi poss√≠vel processar o conte√∫do!")
                    return
                
                # Criar estrutura do notebook
                notebook_content = self.create_notebook_structure(parsed_cells)
                
                # Salvar arquivo tempor√°rio
                temp_filename = 'temp_notebook.ipynb'
                with open(temp_filename, 'w', encoding='utf-8') as f:
                    f.write(notebook_content)
                
                self.log("üì§ Enviando para Google Drive...")
                
                # Upload
                media = MediaFileUpload(temp_filename, mimetype='application/vnd.google-colaboratory')
                result = self.service.files().update(
                    fileId=self.notebook_id,
                    media_body=media
                ).execute()
                
                # Limpeza
                os.remove(temp_filename)
                
                self.log("üéâ SUCESSO! Notebook atualizado!")
                messagebox.showinfo("Sucesso!", 
                                   f"Notebook atualizado com sucesso!\n\n"
                                   f"C√©lulas criadas: {len(parsed_cells)}\n"
                                   f"Recarregue a p√°gina do Colab para ver as mudan√ßas.\n\n"
                                   f"Link: https://colab.research.google.com/drive/{self.notebook_id}")
                
            except Exception as e:
                self.log(f"‚ùå Erro: {e}")
                messagebox.showerror("Erro", f"Erro ao processar: {e}")
            finally:
                self.progress.stop()
                
        threading.Thread(target=process_thread, daemon=True).start()
        
    def clear_all(self):
        """Limpa todos os campos"""
        self.content_text.delete(1.0, tk.END)
        self.link_entry.delete(0, tk.END)
        self.link_status.config(text="")
        self.notebook_id = None
        self.log("üßπ Campos limpos!")

if __name__ == "__main__":
    root = tk.Tk()
    app = AgenteColabGUI(root)
    root.mainloop()