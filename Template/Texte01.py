---

```markdown
## üéì **Aula sobre: A Fun√ß√£o `print()` e F-Strings**

<br>

### üß≠ Sum√°rio da Aula

| # | Sub-t√≥pico                      | Tempo Estimado | Complexidade |
|---|---------------------------------|----------------|--------------|
| 1 | Ficha de Revis√£o R√°pida         | ~1 min         | ‚≠ê           |
| 2 | Mergulho Profundo               | ~15 min        | ‚≠ê‚≠ê‚≠ê‚≠ê       |
| 3 | Profundezas e Conex√µes          | ~3 min         | ‚≠ê‚≠ê         |
| 4 | A√ß√£o e Verifica√ß√£o              | ~5 min         | ‚≠ê‚≠ê         |
| 5 | Mergulhos Adicionais            | Opcional       | ‚≠ê‚≠ê‚≠ê‚≠ê       |

<br>

---
<br>
```

---

```markdown
### 1. üß† Ficha de Revis√£o R√°pida | (O Essencial)

<br>

> A fun√ß√£o `print()` exibe valores no console e aceita par√¢metros como `sep`, `end`, `file` e `flush`.  
> *F-strings* s√£o literais de string prefixados com `f` que permitem interpolar express√µes dentro de chaves `{}` e usar especificadores de formata√ß√£o (ex: `:.2f`).

<br>

### 2. üî¨ Mergulho Profundo | (Os Detalhes)

<br>

#### **üéØ O Conceito Central**  
- `print(*args, sep=' ', end='\n', file=sys.stdout, flush=False)` envia texto formatado para *stdout*.  
- *F-strings* avaliam express√µes em tempo de execu√ß√£o, criando a string resultante antes do envio a `print()`.

<br>

#### **üîó Analogia de Data Science**  
Imagine gerar relat√≥rios em que voc√™ mescla texto est√°tico com valores calculados (ex: m√©dia de vendas). `print()` √© a impressora que sai do pipeline, e *f-strings* s√£o os moldes que unem dados e texto de forma clara e eficiente.

<br>

### **üíª Exemplos de Mercado (Abrangentes)**
```

---

```markdown
#### **N√≠vel Simples: Uso b√°sico de `print()`**
```

---

‚ñ∂Ô∏è **C√≥digo para Executar (C√©lula):**

```python
print("A", "B", "C", sep="-", end="!\n")
```

üìñ **Texto para Leitura (Markdown):**

```markdown
*   **O que o c√≥digo faz:** Imprime ‚ÄúA-B-C!‚Äù no console, usando `-` como separador e `!`+quebra de linha ao final.  
*   **Cen√°rio de Mercado:** √ötil para moldar logs ou apresenta√ß√µes de dados sequenciais.  
*   **Boas Pr√°ticas:** Use par√¢metros para clareza em sa√≠das complexas.
```

---

```markdown
#### **N√≠vel Intermedi√°rio: F-Strings B√°sicas**
```

---

‚ñ∂Ô∏è **C√≥digo para Executar (C√©lula):**

```python
nome = "Lorenzo"
idade = 28
print(f"Ol√°, {nome}. Voc√™ tem {idade} anos.")
```

üìñ **Texto para Leitura (Markdown):**

```markdown
*   **O que o c√≥digo faz:** Interpola as vari√°veis `nome` e `idade` na string.  
*   **Cen√°rio de Mercado:** Base para gerar templates de relat√≥rios com dados din√¢micos.  
*   **Boas Pr√°ticas:** Evite concatenar strings com `+`, prefira *f-strings* pela legibilidade.
```

---

```markdown
#### **N√≠vel Avan√ßado: Formata√ß√£o Avan√ßada com F-Strings**
```

---

‚ñ∂Ô∏è **C√≥digo para Executar (C√©lula):**

```python
pi = 3.1415926535
print(f"Valor de œÄ: {pi:.2f}")
```

üìñ **Texto para Leitura (Markdown):**

```markdown
*   **O que o c√≥digo faz:** Formata `pi` com duas casas decimais.  
*   **Cen√°rio de Mercado:** Essencial em dashboards financeiros e cient√≠ficos.  
*   **Boas Pr√°ticas:** Use especificadores (`:.2f`, `:>8`, etc.) para alinhar e padronizar sa√≠das.
```

---

```markdown
#### **N√≠vel DEUS (1/3): Impress√£o em Arquivo e Flush**
```

---

‚ñ∂Ô∏è **C√≥digo para Executar (C√©lula):**

```python
with open("log.txt", "a") as log:
    print("Registro de evento", file=log, flush=True)
```

üìñ **Texto para Leitura (Markdown):**

```markdown
*   **O que o c√≥digo faz:** Escreve no arquivo ‚Äúlog.txt‚Äù e for√ßa grava√ß√£o imediata.  
*   **Cen√°rio de Mercado:** Importante em sistemas de logging e auditoria de processos.  
*   **Boas Pr√°ticas:** Use `flush=True` para evitar perda de dados em encerramentos abruptos.
```

---

```markdown
#### **N√≠vel DEUS (2/3): Depura√ß√£o com F-Strings (`=`)**
```

---

‚ñ∂Ô∏è **C√≥digo para Executar (C√©lula):**

```python
x = 10
y = 20
print(f"{x=} e {y=}")
```

üìñ **Texto para Leitura (Markdown):**

```markdown
*   **O que o c√≥digo faz:** Imprime `x=10 e y=20`, mostrando nomes e valores.  
*   **Cen√°rio de Mercado:** Agiliza debug sem escrever m√∫ltiplos `print()`.  
*   **Boas Pr√°ticas:** Use em desenvolvimento, remova em produ√ß√£o para n√£o vazar dados.
```

---

```markdown
#### **N√≠vel DEUS (3/3): F-Strings Multilinha e Express√µes**
```

---

‚ñ∂Ô∏è **C√≥digo para Executar (C√©lula):**

```python
user = {"nome":"Lorenzo", "idade":28}
print(f"""
Usu√°rio:
 Nome : {user['nome']}
 Idade: {user['idade']}
Data : {__import__('datetime').date.today()}
""")
```

üìñ **Texto para Leitura (Markdown):**

```markdown
*   **O que o c√≥digo faz:** Usa f-string multilinha, inclui express√µes e chamadas de fun√ß√£o.  
*   **Cen√°rio de Mercado:** Gera relat√≥rios complexos e templates de e-mail automatizados.  
*   **Boas Pr√°ticas:** Cuidado com indenta√ß√£o e performance de express√µes pesadas.
```

````
---
```markdown
### 3. üï∏Ô∏è Profundezas e Conex√µes

<br>
`print()` √© amplamente substitu√≠do por frameworks de *logging* em produ√ß√£o para n√≠veis de severidade e formata√ß√£o avan√ßada. *F-strings* s√£o parte do *PEP 498* e superam `.format()` e `%` em performance e legibilidade. Conectar sa√≠da formatada a relat√≥rios HTML/Markdown facilita dashboards automatizados.
<br>

---
<br>
````

---

```markdown
### 4. üöÄ A√ß√£o e Verifica√ß√£o

<br>
#### **ü§î Desafio Pr√°tico**
1. Use `print()` para exibir `"Bem-vindo ao sistema"` sem quebra de linha ao final.  
2. Dada a lista `itens = ["caneta","caderno","borracha"]`, imprima-os separados por `"; "`.  
3. Crie `produto="Caneta"`, `preco=2.5` e use *f-string* para exibir `Produto: Caneta ‚Äî R$ 2.50`.  
4. Defina `pi=3.14159`, `e=2.71828` e exiba ambos com 3 casas decimais em uma √∫nica f-string.  
5. Explique por que `print(a, b)` e `print(f"{a} {b}")` podem produzir resultados diferentes.

<br>
#### **‚ùì Pergunta de Verifica√ß√£o**
Quando usar *f-strings* em vez de concatena√ß√£o (`+`) ou operador `%`? Quais vantagens de performance e seguran√ßa elas oferecem?
<br>

---
<br>
```

5 üåä Mergulhos Adicionais Opcionais

* Uso de `logging` vs `print()`
* M√©todo `.format()` e *Template Strings*
* Performance: *f-strings* vs `.format()` vs `%`
* Outras Sugest√µes
* Voltar ao Menu Op√ß√µes

